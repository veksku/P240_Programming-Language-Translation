%{

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cstring>
#include <map>

using namespace std;

#define YYDEBUG 1
#include "niske.hpp"

extern int yylex();

void yyerror(string s){
	cerr << "Sintaksna greska: " << s << endl;
	exit(EXIT_FAILURE);
}

map<string, Niska*> promenljive;

void deinicijalizuj(){
	for (auto it = promenljive.begin(); it != promenljive.end(); it++)
		delete it->second;
}

%}

%union{
	int v;
	string* ime;
	Niska* niska;
}

%left '+'
%left '*'
%right '['
%token PRINT_T LOWER_T UPPER_T REVERSE_T INDEX_T DODELA_T 
%token <v> BROJ
%token <ime> STRING_T VAR_T

%type<niska> izraz
%type<v> celibr

%start program

%%

program: naredba '\n' program { }
	| naredba '\n' { }
	| '\n' { }
	;

naredba: PRINT_T '(' izraz ')' {
		cout << $3->get_niska() << endl;
	}
	| PRINT_T '(' celibr ')' { cout << $3 << endl;}
	|	VAR_T DODELA_T izraz { 
		auto it = promenljive.find(*$1);
		if(it != promenljive.end())
			delete it->second;
			
		promenljive[*$1] = $3;
		delete $1;
	}
	;
	
izraz: izraz '+' izraz { $$ = *$1 + *$3; delete $1; delete $3; }
	| izraz '*' celibr {
		$$ = new Niska();
		$$->set_niska($1->pomnozi($3));
		delete $1;
	}
	| celibr '*' izraz {
		$$ = new Niska();
		$$->set_niska($3->pomnozi($1));
		delete $3;
	}
	| '(' izraz ')' { $$ = $2; }
	| izraz '[' celibr ':' ']' {
		$$ = new Niska();
		$$->set_niska($1->podniska1($3));
		delete $1;
	}
	| izraz '[' ':' celibr ']' {
		$$ = new Niska();
		$$->set_niska($1->podniska2($4));
		delete $1;}
	| izraz '[' celibr ':' celibr ']' {
		$$ = new Niska();
		$$->set_niska($1->podniska3($3,$5));
		delete $1;
	}
	| LOWER_T '(' izraz ')' { 
		$$ = new Niska();
		$$->set_niska($3->lower());
		delete $3;
	}
	| UPPER_T '(' izraz ')' { 
		$$ = new Niska();
		$$->set_niska($3->upper());
		delete $3;
	}
	| REVERSE_T '(' izraz ')' {
		$$ = new Niska();
		$$->set_niska($3->reverse());
		delete $3;
	}
	| VAR_T { 
		auto it = promenljive.find(*$1);
		if(it == promenljive.end())
			yyerror("Promenljiva nije definisana");
		
		$$ = promenljive[*$1];
		delete $1;
	}
	| STRING_T { $$ = new Niska(*$1); delete $1; }
	;
	
celibr: '|' izraz '|' { $$ = $2->duzina(); delete $2; }
	| INDEX_T '(' VAR_T ',' STRING_T ')' { 
		auto it = promenljive.find(*$3);
		if (it == promenljive.end()) {
			yyerror("Promenljiva nije definisana");
		}
	
		$$ = promenljive[*$3]->indeks(*$5); 
		delete $5; 
	}
	| BROJ { $$ = $1; }
	;

%%

int main(){
	yydebug = 1;
	if(yyparse() == 0)
		cout << "Sve ok" << endl;
	else
		cout << "Sintaksna greska" << endl;
	deinicijalizuj();
	exit(EXIT_FAILURE);
}
