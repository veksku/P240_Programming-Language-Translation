%{

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

#include "kvaternion.hpp"

extern int yylex();

void yyerror(string s){
	cerr<<"Sintaksna greska: "<<s<<endl;
	exit(EXIT_FAILURE);
}

map<string, Kvaternion*> promenljive;

void deinicijalizuj(){
	for (auto it = promenljive.begin(); it != promenljive.end(); it++){
		delete it->second;
	}
}

%}

%union{
	double v;
	string* ime;
	element_t e;
	Kvaternion* k;
}

%left '+' '-'
%left '*' '/'
%right UMINUS

%token DEF_T PRINT_T NORM_T DODELA
%token<v> BROJ
%token<ime> ID FMT_STRING

%type<e> element
%type<k> lista_el izraz

%start program

%%

program: 	program naredba ';' {}
	| naredba ';'	{}
	;
naredba: PRINT_T '(' FMT_STRING ',' ID ')' 	{
											auto it = promenljive.find(*$5);
											if (it == promenljive.end()) {
												yyerror("Promenljiva ne postoji");
											}
											
											Kvaternion* p = it->second;
											string s = *$3;
											
											//if(strcmp("\"%q\"", s)){
												// stampaj ceo kvaternion
											//}
											cout<<(*p)<<endl;
											
											delete $5;
											delete $3;
										}
	| definicija	{}
	| ID DODELA izraz {
											auto it = promenljive.find(*$1);
											if (it == promenljive.end()) {
												yyerror("Promenljiva ne postoji");
											}
											
											delete it->second;
											
											promenljive[*$1] = $3;
											
											delete $1;
										}
	| NORM_T '(' ID ')' {
												auto it = promenljive.find(*$3);
												if (it == promenljive.end()) {
													yyerror("Promenljiva ne postoji");
												}
												
												Kvaternion* p = it->second;
												
												cout<<"Norma: "<<(p->norm())<<endl;
											}
	;
definicija: DEF_T '(' ID ')' 	{
																auto it = promenljive.find(*$3);
																if (it != promenljive.end()) {
																	yyerror("Promenljiva vec postoji");
																}
																
																promenljive[*$3] = new Kvaternion();
																delete $3;
															}
	| DEF_T '(' ID ',' lista_el ')'	{
																		auto it = promenljive.find(*$3);
																		if (it != promenljive.end()) {
																			yyerror("Promenljiva vec postoji");
																		}
																		
																		promenljive[*$3] = $5;
																		delete $3;
																	}
	;
lista_el: lista_el ',' element	{
																	bool retVal = $1->dodaj($3);
																	
																	if(retVal == false){
																		yyerror("Vec definisano");
																	}
																	
																	$$ = $1;
																}
	| element {
							$$ = new Kvaternion();
							$$->dodaj($1);
						}
	;
element: ID ':' BROJ {
								$$.el = 0;
								if ($1->compare("s") == 0){ 
									$$.v = $3;
									$$.el = DEF_S;
								}
								else if ($1->compare("i") == 0){
									$$.v = $3;
									$$.el = DEF_I;
								}
								else if ($1->compare("j") == 0){
									$$.v = $3;
									$$.el = DEF_J;
								}
								else if ($1->compare("k") == 0){
									$$.v = $3;
									$$.el = DEF_K;
								}
								else {
									yyerror("Nedozvoljeni simbol");
								}
		}
	;
izraz: izraz '+' izraz {$$ = *$1 + *$3; delete $1; delete $3;}
	|	izraz '-' izraz {$$ = *$1 - *$3; delete $1; delete $3;}
	|	izraz '*' izraz {$$ = *$1 * *$3; delete $1; delete $3;}
	|	izraz '/' izraz {$$ = *$1 / *$3; delete $1; delete $3;}
	| '(' izraz ')' {$$ = $2;}
	|	'-' izraz %prec UMINUS 	{
															$$ = -(*$2);
															delete $2;
														}
	| BROJ '*' izraz 	{
											$$ = new Kvaternion();
											
											$$->set_s($1*$3->get_s());
											$$->set_i($1*$3->get_i());
											$$->set_j($1*$3->get_j());
											$$->set_k($1*$3->get_k());
											
											delete $3;
										}
	| ID 	{
					auto it = promenljive.find(*$1);
					if (it == promenljive.end()){
						yyerror("Promenljiva nije definisana");
					}
					
					$$ = new Kvaternion(*(it->second));
					delete $1;
				}
	;

%%

int main(){
	if (yyparse() == 0){
		cout<<"Sve ok"<<endl;
	}
	else{
		cout<<"Sintaksna greska"<<endl;
	}
	deinicijalizuj();
	exit(EXIT_SUCCESS);
}
